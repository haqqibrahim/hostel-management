/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RoomAllocationService } from "../roomAllocation.service";
import { RoomAllocationCreateInput } from "./RoomAllocationCreateInput";
import { RoomAllocation } from "./RoomAllocation";
import { RoomAllocationFindManyArgs } from "./RoomAllocationFindManyArgs";
import { RoomAllocationWhereUniqueInput } from "./RoomAllocationWhereUniqueInput";
import { RoomAllocationUpdateInput } from "./RoomAllocationUpdateInput";

export class RoomAllocationControllerBase {
  constructor(protected readonly service: RoomAllocationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RoomAllocation })
  async createRoomAllocation(
    @common.Body() data: RoomAllocationCreateInput
  ): Promise<RoomAllocation> {
    return await this.service.createRoomAllocation({
      data: {
        ...data,

        room: data.room
          ? {
              connect: data.room,
            }
          : undefined,

        student: data.student
          ? {
              connect: data.student,
            }
          : undefined,
      },
      select: {
        adminApproval: true,
        allocationDate: true,
        allocationStatus: true,
        createdAt: true,
        id: true,

        room: {
          select: {
            id: true,
          },
        },

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RoomAllocation] })
  @ApiNestedQuery(RoomAllocationFindManyArgs)
  async roomAllocations(
    @common.Req() request: Request
  ): Promise<RoomAllocation[]> {
    const args = plainToClass(RoomAllocationFindManyArgs, request.query);
    return this.service.roomAllocations({
      ...args,
      select: {
        adminApproval: true,
        allocationDate: true,
        allocationStatus: true,
        createdAt: true,
        id: true,

        room: {
          select: {
            id: true,
          },
        },

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RoomAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async roomAllocation(
    @common.Param() params: RoomAllocationWhereUniqueInput
  ): Promise<RoomAllocation | null> {
    const result = await this.service.roomAllocation({
      where: params,
      select: {
        adminApproval: true,
        allocationDate: true,
        allocationStatus: true,
        createdAt: true,
        id: true,

        room: {
          select: {
            id: true,
          },
        },

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RoomAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRoomAllocation(
    @common.Param() params: RoomAllocationWhereUniqueInput,
    @common.Body() data: RoomAllocationUpdateInput
  ): Promise<RoomAllocation | null> {
    try {
      return await this.service.updateRoomAllocation({
        where: params,
        data: {
          ...data,

          room: data.room
            ? {
                connect: data.room,
              }
            : undefined,

          student: data.student
            ? {
                connect: data.student,
              }
            : undefined,
        },
        select: {
          adminApproval: true,
          allocationDate: true,
          allocationStatus: true,
          createdAt: true,
          id: true,

          room: {
            select: {
              id: true,
            },
          },

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RoomAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRoomAllocation(
    @common.Param() params: RoomAllocationWhereUniqueInput
  ): Promise<RoomAllocation | null> {
    try {
      return await this.service.deleteRoomAllocation({
        where: params,
        select: {
          adminApproval: true,
          allocationDate: true,
          allocationStatus: true,
          createdAt: true,
          id: true,

          room: {
            select: {
              id: true,
            },
          },

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
