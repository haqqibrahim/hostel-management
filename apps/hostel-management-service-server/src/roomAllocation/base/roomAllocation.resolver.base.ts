/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RoomAllocation } from "./RoomAllocation";
import { RoomAllocationCountArgs } from "./RoomAllocationCountArgs";
import { RoomAllocationFindManyArgs } from "./RoomAllocationFindManyArgs";
import { RoomAllocationFindUniqueArgs } from "./RoomAllocationFindUniqueArgs";
import { CreateRoomAllocationArgs } from "./CreateRoomAllocationArgs";
import { UpdateRoomAllocationArgs } from "./UpdateRoomAllocationArgs";
import { DeleteRoomAllocationArgs } from "./DeleteRoomAllocationArgs";
import { Room } from "../../room/base/Room";
import { Student } from "../../student/base/Student";
import { RoomAllocationService } from "../roomAllocation.service";
@graphql.Resolver(() => RoomAllocation)
export class RoomAllocationResolverBase {
  constructor(protected readonly service: RoomAllocationService) {}

  async _roomAllocationsMeta(
    @graphql.Args() args: RoomAllocationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RoomAllocation])
  async roomAllocations(
    @graphql.Args() args: RoomAllocationFindManyArgs
  ): Promise<RoomAllocation[]> {
    return this.service.roomAllocations(args);
  }

  @graphql.Query(() => RoomAllocation, { nullable: true })
  async roomAllocation(
    @graphql.Args() args: RoomAllocationFindUniqueArgs
  ): Promise<RoomAllocation | null> {
    const result = await this.service.roomAllocation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RoomAllocation)
  async createRoomAllocation(
    @graphql.Args() args: CreateRoomAllocationArgs
  ): Promise<RoomAllocation> {
    return await this.service.createRoomAllocation({
      ...args,
      data: {
        ...args.data,

        room: args.data.room
          ? {
              connect: args.data.room,
            }
          : undefined,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RoomAllocation)
  async updateRoomAllocation(
    @graphql.Args() args: UpdateRoomAllocationArgs
  ): Promise<RoomAllocation | null> {
    try {
      return await this.service.updateRoomAllocation({
        ...args,
        data: {
          ...args.data,

          room: args.data.room
            ? {
                connect: args.data.room,
              }
            : undefined,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RoomAllocation)
  async deleteRoomAllocation(
    @graphql.Args() args: DeleteRoomAllocationArgs
  ): Promise<RoomAllocation | null> {
    try {
      return await this.service.deleteRoomAllocation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Room, {
    nullable: true,
    name: "room",
  })
  async getRoom(
    @graphql.Parent() parent: RoomAllocation
  ): Promise<Room | null> {
    const result = await this.service.getRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  async getStudent(
    @graphql.Parent() parent: RoomAllocation
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
